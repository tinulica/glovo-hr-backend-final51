import express from 'express';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import prisma from '../lib/prisma.js';

const router = express.Router();

router.post('/register', async (req, res) => {
  try {
    const { email, password, fullName } = req.body;

    const existing = await prisma.user.findUnique({ where: { email } });
    if (existing) return res.status(409).json({ message: 'User already exists' });

    const hashedPassword = await bcrypt.hash(password, 10);

    // Create new user
    const user = await prisma.user.create({
      data: {
        email,
        password: hashedPassword,
        fullName,
        role: 'ADMIN',
      },
    });

    // Create organization and link it
    const org = await prisma.organization.create({
      data: {
        name: `${fullName || 'My Org'}`,
        ownerId: user.id,
        users: {
          connect: { id: user.id },
        },
      },
    });

    // Update user to include org
    await prisma.user.update({
      where: { id: user.id },
      data: {
        organizationId: org.id,
      },
    });

    // Create token
    const token = jwt.sign(
      { id: user.id, email: user.email, role: user.role, orgId: org.id },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );

    res.status(201).json({ token });
  } catch (error) {
    console.error('Register error:', error);
    res.status(500).json({ message: 'Registration failed' });
  }
});

export default router;
