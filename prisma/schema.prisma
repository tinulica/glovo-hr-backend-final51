generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String            @id @default(uuid())
  email                   String            @unique
  password                String
  fullName                String?
  createdAt               DateTime          @default(now())

  // Organization membership
  organizationId          String?
  organization            Organization?     @relation(fields: [organizationId], references: [id])

  // If this user created/owns an Organization
  organizationsOwned      Organization[]    @relation("OrganizationOwner")

  // Entries they manually added or imported
  entries                 Entry[]

  // Import sessions they initiated
  importSessions          ImportSession[]   @relation("UserImportSessions")

  // Invitations they sent/received
  invitationsSent         Invitation[]      @relation("Inviter")
  invitationsReceived     Invitation[]      @relation("Invitee")

  // Password-reset tokens
  resetTokens             ResetToken[]

}

model Organization {
  id                   String            @id @default(uuid())
  name                 String            @unique
  createdAt            DateTime          @default(now())

  // Owner of this org
  ownerId              String            @unique
  owner                User              @relation("OrganizationOwner", fields: [ownerId], references: [id])

  // All members (invited & accepted)
  members              User[]            @relation(fields: [id], references: [organizationId])

  // Invitations for this org
  invitations          Invitation[]      @relation("OrgInvitations")

  // All entries belonging to this org
  entries              Entry[]           @relation("OrgEntries")

  // Sessions of imports into this org
  importSessions       ImportSession[]   @relation("OrgImportSessions")
}

model Invitation {
  id                  String          @id @default(uuid())
  token               String          @unique
  createdAt           DateTime        @default(now())
  expiresAt           DateTime

  // Who sent it
  inviterId           String
  inviter             User            @relation("Inviter", fields: [inviterId], references: [id])

  // Who accepted it (once they register)
  inviteeId           String?
  invitee             User?           @relation("Invitee", fields: [inviteeId], references: [id])

  // Org theyâ€™re being invited into
  organizationId      String
  organization        Organization    @relation("OrgInvitations", fields: [organizationId], references: [id])
}

model File {
  id          String           @id @default(uuid())
  name        String
  url         String
  uploadedAt  DateTime         @default(now())

  sessions    ImportSession[]  @relation("FileSessions")
}

model ImportSession {
  id              String           @id @default(uuid())
  platform        String
  createdAt       DateTime         @default(now())

  // Which file we imported
  fileId          String
  file            File             @relation("FileSessions", fields: [fileId], references: [id])

  // Who triggered it
  createdById     String
  createdBy       User             @relation("UserImportSessions", fields: [createdById], references: [id])

  // Which org
  organizationId  String
  organization    Organization     @relation("OrgImportSessions", fields: [organizationId], references: [id])

  // All entries created/updated in this import
  entries         Entry[]
}

model Entry {
  id               String            @id @default(uuid())
  externalId       String?
  fullName         String
  email            String
  platform         String
  companyName      String?
  iban             String?
  bankName         String?
  beneficiary      String?
  createdAt        DateTime          @default(now())

  // Who manually added it
  userId           String
  user             User              @relation(fields: [userId], references: [id])

  // Belongs to this org
  organizationId   String
  organization     Organization      @relation("OrgEntries", fields: [organizationId], references: [id])

  // If created via an import
  importSessionId  String?
  importSession    ImportSession?    @relation(fields: [importSessionId], references: [id])

  // Historical salary records
  salaryHistories  SalaryHistory[]
}

model SalaryHistory {
  id        String    @id @default(uuid())
  date      DateTime
  amount    Float
  hours     Int
  net       Float
  createdAt DateTime  @default(now())

  entryId   String
  entry     Entry     @relation(fields: [entryId], references: [id])
}

model ResetToken {
  id         String    @id @default(uuid())
  token      String    @unique
  expiresAt  DateTime
  createdAt  DateTime  @default(now())

  userId     String
  user       User      @relation(fields: [userId], references: [id])
}
