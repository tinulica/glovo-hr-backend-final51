generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  password    String
  fullName    String?
  createdAt   DateTime      @default(now())
  entries     Entry[]
  resetTokens ResetToken[]
}

model Entry {
  id               String           @id @default(uuid())
  userId           String
  user             User             @relation(fields: [userId], references: [id])
  fullName         String
  email            String
  platform         String
  externalId       String?
  companyName      String?
  iban             String?
  bankName         String?
  beneficiary      String?
  createdAt        DateTime         @default(now())
  salaryHistories  SalaryHistory[]
  importSessionId  String?
  importSession    ImportSession?   @relation(fields: [importSessionId], references: [id])
}

model SalaryHistory {
  id        String   @id @default(uuid())
  entryId   String
  entry     Entry    @relation(fields: [entryId], references: [id])
  date      DateTime
  amount    Float
  hours     Int
  net       Float
  createdAt DateTime @default(now())
}

model ImportSession {
  id        String     @id @default(uuid())
  platform  String

  // enforce one-to-one with File
  fileId    String     @unique
  file      File       @relation(fields: [fileId], references: [id])

  createdAt DateTime   @default(now())
  entries   Entry[]
}

model File {
  id            String          @id @default(uuid())
  name          String
  url           String
  uploadedAt    DateTime        @default(now())

  // back-relation for the one-to-one
  importSession ImportSession?
}

model ResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}
