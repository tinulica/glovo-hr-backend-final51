generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String           @id @default(uuid())
  email                String           @unique
  password             String
  fullName             String?
  createdAt            DateTime         @default(now())

  // Ownership
  organizationOwned    Organization?    @relation("OrganizationOwner")
  organizations        Organization[]   @relation("OrgMembers")

  // Invitations
  invitationsSent      Invitation[]     @relation("Inviter")
  invitationsReceived  Invitation[]     @relation("Invitee")

  // Entries & imports
  entries              Entry[]
  importSessions       ImportSession[]

  // Password reset
  resetTokens          ResetToken[]
}

model Organization {
  id             String           @id @default(uuid())
  name           String
  ownerId        String           @unique
  owner          User             @relation("OrganizationOwner", fields: [ownerId], references: [id])
  members        User[]           @relation("OrgMembers")

  // ‚Üê Add this:
  entries        Entry[]

  // Keep these too
  invitations    Invitation[]
  importSessions ImportSession[]

  createdAt      DateTime         @default(now())
}

model Invitation {
  id             String         @id @default(uuid())
  inviterId      String
  inviter        User           @relation("Inviter", fields: [inviterId], references: [id])
  inviteeId      String?
  invitee        User?          @relation("Invitee", fields: [inviteeId], references: [id])
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id])
  token          String         @unique
  status         String
  createdAt      DateTime       @default(now())
}

model Entry {
  id             String           @id @default(uuid())
  externalId     String?
  fullName       String
  email          String
  platform       String
  companyName    String?
  iban           String?
  bankName       String?
  beneficiary    String?

  // Multi-tenant relation
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id])

  // Who created this
  createdById    String
  createdBy      User             @relation(fields: [createdById], references: [id])

  importSessionId String?
  importSession   ImportSession?  @relation(fields: [importSessionId], references: [id])

  salaryHistories SalaryHistory[]
  createdAt       DateTime         @default(now())
}

model SalaryHistory {
  id        String   @id @default(uuid())
  entryId   String
  entry     Entry    @relation(fields: [entryId], references: [id])
  date      DateTime
  amount    Float
  hours     Int
  net       Float
  createdAt DateTime @default(now())
}

model ImportSession {
  id             String         @id @default(uuid())
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id])

  createdById    String
  createdBy      User           @relation(fields: [createdById], references: [id])

  platform       String
  fileId         String
  file           File           @relation(fields: [fileId], references: [id])
  entries        Entry[]

  createdAt      DateTime       @default(now())
}

model File {
  id         String           @id @default(uuid())
  name       String
  url        String
  uploadedAt DateTime         @default(now())
  sessions   ImportSession[]
}

model ResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}
