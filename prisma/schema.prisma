// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String           @id @default(uuid())
  email              String           @unique
  password           String
  fullName           String?
  // until we assign them, orgId can be null
  organizationId     String?          
  // the organization they belong to (member side)
  organization       Organization?    @relation("OrgMembers", fields: [organizationId], references: [id])
  // the orgs they own (owner side)
  organizationsOwned Organization[]   @relation("OrgOwner")
  entries            Entry[]          // people they created/imported
  importSessions     ImportSession[]  @relation("SessionCreator")
  invitationsSent    Invitation[]     @relation("Inviter")
  invitationsReceived Invitation[]    @relation("Invitee")
  resetTokens        ResetToken[]

  createdAt          DateTime         @default(now())
}

model Organization {
  id          String    @id @default(uuid())
  name        String
  // exactly one owner
  ownerId     String    @unique
  owner       User      @relation("OrgOwner", fields: [ownerId], references: [id])
  // all members (including owner)
  members     User[]    @relation("OrgMembers")
  // all sessions, entries, invites under this org
  importSessions ImportSession[]
  entries        Entry[]
  invitations    Invitation[]

  createdAt   DateTime  @default(now())
}

model Entry {
  id               String          @id @default(uuid())
  fullName         String
  email            String
  platform         String
  externalId       String?
  companyName      String?
  iban             String?
  bankName         String?
  beneficiary      String?
  createdAt        DateTime        @default(now())
  collabType     String?
  collabDetails  Json?
  // scoping
  organization     Organization    @relation(fields: [organizationId], references: [id])
  organizationId   String
  createdBy        User            @relation(fields: [createdById], references: [id])
  createdById      String

  importSession    ImportSession?  @relation(fields: [importSessionId], references: [id])
  importSessionId  String?

  salaryHistories  SalaryHistory[]
}

model SalaryHistory {
  id        String    @id @default(uuid())
  entry     Entry     @relation(fields: [entryId], references: [id])
  entryId   String
  amount    Float
  date      DateTime
  hours     Int
  net       Float
}

model UploadedFile {
  id             String         @id @default(uuid())
  name           String
  url            String?
  // back-relation; each file may belong to one import session
  importSession  ImportSession? 
}

model ImportSession {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  platform       String

  // who ran it
  createdBy      User           @relation("SessionCreator", fields: [createdById], references: [id])
  createdById    String

  // which org
  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId String

  // upload
  file           UploadedFile   @relation(fields: [fileId], references: [id])
  fileId         String         @unique

  // entries linked to this session
  entries        Entry[]

}

model Invitation {
  id             String         @id @default(uuid())
  token          String         @unique
  invitedEmail   String
  createdAt      DateTime       @default(now())

  inviter        User           @relation("Inviter", fields: [inviterId], references: [id])
  inviterId      String

  invitee        User?          @relation("Invitee", fields: [inviteeId], references: [id])
  inviteeId      String?

  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId String
}

model ResetToken {
  id        String    @id @default(uuid())
  token     String    @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime

  user      User      @relation(fields: [userId], references: [id])
  userId    String
}
