// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  email            String          @unique
  password         String
  fullName         String?
  // Made optional so we can create the user first
  organizationId   String?         
  // membership side
  organization     Organization?   @relation("OrgMembers", fields: [organizationId], references: [id])
  // owner side
  organizationsOwned Organization[] @relation("OrgOwner")
  entries          Entry[]
  // ... reset tokens, invites, etc.
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  // exactly one owner
  ownerId   String   @unique
  owner     User     @relation("OrgOwner", fields: [ownerId], references: [id])
  // all members (including owner)
  members   User[]   @relation("OrgMembers")
  // ... importSessions, invites, etc.
}
model Invitation {
  id             String        @id @default(uuid())
  token          String        @unique

  // Which org this invite is for:
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id])

  // Who sent it / who (optionally) accepted it:
  inviterId      String
  inviter        User          @relation("Inviter", fields: [inviterId], references: [id])
  inviteeId      String?
  invitee        User?         @relation("Invitee", fields: [inviteeId], references: [id])

  invitedEmail   String
  createdAt      DateTime      @default(now())
}

model Entry {
  id             String           @id @default(uuid())
  fullName       String
  email          String
  platform       String
  externalId     String?
  companyName    String?
  iban           String?
  bankName       String?
  beneficiary    String?

  // Who added it:
  createdById    String
  createdBy      User             @relation(fields: [createdById], references: [id])

  // Which org it belongs to:
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id])

  salaryHistories SalaryHistory[]
}

model SalaryHistory {
  id       String   @id @default(uuid())
  entryId  String
  entry    Entry    @relation(fields: [entryId], references: [id])
  amount   Float
  date     DateTime
  hours    Int
  net      Float
}

model ImportSession {
  id             String       @id @default(uuid())
  platform       String

  // Which org created it:
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  // Who ran the import:
  createdById    String
  createdBy      User         @relation(fields: [createdById], references: [id])

  fileName       String
  createdAt      DateTime     @default(now())
}
