generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String           @id @default(uuid())
  email                String           @unique
  password             String
  fullName             String
  createdAt            DateTime         @default(now())

  // entries this user has created/imported
  entries              Entry[]

  // password reset tokens
  resetTokens          ResetToken[]

  // multi-tenant: which organization they belong to
  organizationId       String?
  organization         Organization?    @relation("OrgMembers", fields: [organizationId], references: [id])

  // invitations (sent & received)
  invitationsSent      Invitation[]     @relation("Inviter")
  invitationsReceived  Invitation[]     @relation("Invitee")
}

model Organization {
  id            String           @id @default(uuid())
  name          String

  // the owner/admin
  ownerId       String           @unique
  owner         User             @relation(fields: [ownerId], references: [id])

  members       User[]           @relation("OrgMembers")

  // scoping of entries & imports
  entries       Entry[]
  importSessions ImportSession[]
}

model Invitation {
  id             String         @id @default(uuid())
  inviterId      String
  inviter        User           @relation("Inviter", fields: [inviterId], references: [id])
  inviteeId      String?
  invitee        User?          @relation("Invitee", fields: [inviteeId], references: [id])
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id])
  token          String         @unique
  expiresAt      DateTime
  createdAt      DateTime       @default(now())
}

model Entry {
  id               String           @id @default(uuid())
  userId           String
  user             User             @relation(fields: [userId], references: [id])
  organizationId   String
  organization     Organization     @relation(fields: [organizationId], references: [id])

  externalId       String?
  fullName         String
  email            String
  platform         String
  companyName      String?
  iban             String?
  bankName         String?
  beneficiary      String?
  createdAt        DateTime         @default(now())

  salaryHistories  SalaryHistory[]

  importSessionId  String?
  importSession    ImportSession?   @relation(fields: [importSessionId], references: [id])
}

model SalaryHistory {
  id        String   @id @default(uuid())
  entryId   String
  entry     Entry    @relation(fields: [entryId], references: [id])
  date      DateTime
  amount    Float
  hours     Int
  net       Float
  createdAt DateTime @default(now())
}

model ImportSession {
  id             String         @id @default(uuid())
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id])
  createdById    String
  createdBy      User           @relation(fields: [createdById], references: [id])
  platform       String

  // <<< Option A: make this a true one-to-one by marking fileId unique
  fileId         String         @unique
  file           UploadedFile   @relation(fields: [fileId], references: [id])

  createdAt      DateTime       @default(now())
  entries        Entry[]
}

model UploadedFile {
  id         String           @id @default(uuid())
  name       String
  url        String
  uploadedAt DateTime         @default(now())
  sessions   ImportSession[]
}

model ResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}
