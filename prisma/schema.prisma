generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String           @id @default(uuid())
  email                String           @unique
  password             String
  fullName             String?
  role                 String           @default("user") // ✅ NEW FIELD
  displayOrgName       String?          // ✅ Used for custom org display name
  organizationId       String?
  organization         Organization?    @relation("OrgMembers", fields: [organizationId], references: [id])
  organizationsOwned   Organization[]   @relation("OrgOwner")
  entries              Entry[]
  importSessions       ImportSession[]  @relation("SessionCreator")
  invitationsSent      Invitation[]     @relation("Inviter")
  invitationsReceived  Invitation[]     @relation("Invitee")
  resetTokens          ResetToken[]

  hasCompletedSetup    Boolean          @default(false)
  createdAt            DateTime         @default(now())
}

model Organization {
  id                String          @id @default(uuid())
  name              String
  bio               String?
  hasCompletedSetup Boolean         @default(false)
  ownerId           String          @unique
  owner             User            @relation("OrgOwner", fields: [ownerId], references: [id])
  members           User[]          @relation("OrgMembers")
  importSessions    ImportSession[]
  entries           Entry[]
  invitations       Invitation[]

  createdAt         DateTime        @default(now())
}

model Entry {
  id               String     @id @default(uuid())
  fullName         String
  email            String
  platform         String
  externalId       String?
  companyName      String?
  iban             String?
  bankName         String?
  beneficiary      String?
  createdAt        DateTime   @default(now())
  collabType       String?
  collabDetails    Json?

  organization     Organization  @relation(fields: [organizationId], references: [id])
  organizationId   String
  createdBy        User          @relation(fields: [createdById], references: [id])
  createdById      String

  importSession    ImportSession? @relation(fields: [importSessionId], references: [id])
  importSessionId  String?

  salaryHistories  SalaryHistory[]
}

model SalaryHistory {
  id        String   @id @default(uuid())
  entry     Entry    @relation(fields: [entryId], references: [id])
  entryId   String
  amount    Float
  date      DateTime
  hours     Int
  net       Float
}

model UploadedFile {
  id            String        @id @default(uuid())
  name          String
  url           String?
  importSession ImportSession?
}

model ImportSession {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  platform       String
  createdBy      User           @relation("SessionCreator", fields: [createdById], references: [id])
  createdById    String
  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId String
  file           UploadedFile   @relation(fields: [fileId], references: [id])
  fileId         String         @unique
  entries        Entry[]
}

model Invitation {
  id               String       @id @default(uuid())
  token            String       @unique
  invitedEmail     String
  createdAt        DateTime     @default(now())
  inviterId        String?
  inviter          User?        @relation("Inviter", fields: [inviterId], references: [id])
  inviteeId        String?
  invitee          User?        @relation("Invitee", fields: [inviteeId], references: [id])
  organizationId   String
  organization     Organization @relation(fields: [organizationId], references: [id])
}

model ResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}
