// schema.prisma
// Prisma schema with Organization, User, Entry models

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  email          String        @unique
  password       String
  role           Role
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId String
  entries        Entry[]       @relation("CreatedEntries")
  createdAt      DateTime      @default(now())
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  users     User[]
  entries   Entry[]
  createdAt DateTime @default(now())
}

model Entry {
  id             String        @id @default(cuid())
  name           String
  amount         Float
  date           DateTime
  createdBy      User          @relation("CreatedEntries", fields: [createdById], references: [id])
  createdById    String
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime      @default(now())
}

enum Role {
  ADMIN
  USER
}


// routes/auth/register.ts
import express from 'express';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { prisma } from '../../lib/prisma';
import { JWT_SECRET } from '../../config';

const router = express.Router();

router.post('/register', async (req, res) => {
  const { email, password } = req.body;

  try {
    const existingUser = await prisma.user.findUnique({ where: { email } });
    if (existingUser) {
      return res.status(400).json({ error: 'User already exists' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const organization = await prisma.organization.create({
      data: { name: `${email}'s Organization` },
    });

    const user = await prisma.user.create({
      data: {
        email,
        password: hashedPassword,
        role: 'ADMIN',
        organizationId: organization.id,
      },
    });

    const token = jwt.sign({
      userId: user.id,
      email: user.email,
      organizationId: user.organizationId,
      role: user.role,
    }, JWT_SECRET, { expiresIn: '7d' });

    res.json({ token });
  } catch (err) {
    console.error('Register error:', err);
    res.status(500).json({ error: 'Registration failed' });
  }
});

export default router;
